// ignore_for_file: always_specify_types, unused_element, unused_field
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to Enet
class Enet {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Enet(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Enet.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Initializes ENet globally.  Must be called prior to using any functions in
  /// ENet.
  /// @returns 0 on success, < 0 on failure
  int enet_initialize() {
    return _enet_initialize();
  }

  late final _enet_initializePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('enet_initialize');
  late final _enet_initialize =
      _enet_initializePtr.asFunction<int Function()>();

  /// Initializes ENet globally and supplies user-overridden callbacks. Must be called prior to using any functions in ENet. Do not use enet_initialize() if you use this variant. Make sure the ENetCallbacks structure is zeroed out so that any additional callbacks added in future versions will be properly ignored.
  ///
  /// @param version the constant ENET_VERSION should be supplied so ENet knows which version of ENetCallbacks struct to use
  /// @param inits user-overridden callbacks where any NULL callbacks will use ENet's defaults
  /// @returns 0 on success, < 0 on failure
  int enet_initialize_with_callbacks(
    int version,
    ffi.Pointer<ENetCallbacks> inits,
  ) {
    return _enet_initialize_with_callbacks(
      version,
      inits,
    );
  }

  late final _enet_initialize_with_callbacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ENetVersion,
              ffi.Pointer<ENetCallbacks>)>>('enet_initialize_with_callbacks');
  late final _enet_initialize_with_callbacks =
      _enet_initialize_with_callbacksPtr
          .asFunction<int Function(int, ffi.Pointer<ENetCallbacks>)>();

  /// Shuts down ENet globally.  Should be called when a program that has
  /// initialized ENet exits.
  void enet_deinitialize() {
    return _enet_deinitialize();
  }

  late final _enet_deinitializePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('enet_deinitialize');
  late final _enet_deinitialize =
      _enet_deinitializePtr.asFunction<void Function()>();

  /// Gives the linked version of the ENet library.
  /// @returns the version number
  int enet_linked_version() {
    return _enet_linked_version();
  }

  late final _enet_linked_versionPtr =
      _lookup<ffi.NativeFunction<ENetVersion Function()>>(
          'enet_linked_version');
  late final _enet_linked_version =
      _enet_linked_versionPtr.asFunction<int Function()>();

  /// Returns the wall-time in milliseconds.  Its initial value is unspecified
  /// unless otherwise set.
  int enet_time_get() {
    return _enet_time_get();
  }

  late final _enet_time_getPtr =
      _lookup<ffi.NativeFunction<enet_uint32 Function()>>('enet_time_get');
  late final _enet_time_get = _enet_time_getPtr.asFunction<int Function()>();

  /// Sets the current wall-time in milliseconds.
  void enet_time_set(
    int arg0,
  ) {
    return _enet_time_set(
      arg0,
    );
  }

  late final _enet_time_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(enet_uint32)>>(
          'enet_time_set');
  late final _enet_time_set =
      _enet_time_setPtr.asFunction<void Function(int)>();

  /// @defgroup socket ENet socket functions
  /// @{
  int enet_socket_create(
    int arg0,
  ) {
    return _enet_socket_create(
      arg0,
    );
  }

  late final _enet_socket_createPtr =
      _lookup<ffi.NativeFunction<ENetSocket Function(ffi.Int32)>>(
          'enet_socket_create');
  late final _enet_socket_create =
      _enet_socket_createPtr.asFunction<int Function(int)>();

  int enet_socket_bind(
    int arg0,
    ffi.Pointer<ENetAddress> arg1,
  ) {
    return _enet_socket_bind(
      arg0,
      arg1,
    );
  }

  late final _enet_socket_bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ENetSocket, ffi.Pointer<ENetAddress>)>>('enet_socket_bind');
  late final _enet_socket_bind = _enet_socket_bindPtr
      .asFunction<int Function(int, ffi.Pointer<ENetAddress>)>();

  int enet_socket_get_address(
    int arg0,
    ffi.Pointer<ENetAddress> arg1,
  ) {
    return _enet_socket_get_address(
      arg0,
      arg1,
    );
  }

  late final _enet_socket_get_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ENetSocket,
              ffi.Pointer<ENetAddress>)>>('enet_socket_get_address');
  late final _enet_socket_get_address = _enet_socket_get_addressPtr
      .asFunction<int Function(int, ffi.Pointer<ENetAddress>)>();

  int enet_socket_listen(
    int arg0,
    int arg1,
  ) {
    return _enet_socket_listen(
      arg0,
      arg1,
    );
  }

  late final _enet_socket_listenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ENetSocket, ffi.Int)>>(
          'enet_socket_listen');
  late final _enet_socket_listen =
      _enet_socket_listenPtr.asFunction<int Function(int, int)>();

  int enet_socket_accept(
    int arg0,
    ffi.Pointer<ENetAddress> arg1,
  ) {
    return _enet_socket_accept(
      arg0,
      arg1,
    );
  }

  late final _enet_socket_acceptPtr = _lookup<
      ffi.NativeFunction<
          ENetSocket Function(
              ENetSocket, ffi.Pointer<ENetAddress>)>>('enet_socket_accept');
  late final _enet_socket_accept = _enet_socket_acceptPtr
      .asFunction<int Function(int, ffi.Pointer<ENetAddress>)>();

  int enet_socket_connect(
    int arg0,
    ffi.Pointer<ENetAddress> arg1,
  ) {
    return _enet_socket_connect(
      arg0,
      arg1,
    );
  }

  late final _enet_socket_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ENetSocket, ffi.Pointer<ENetAddress>)>>('enet_socket_connect');
  late final _enet_socket_connect = _enet_socket_connectPtr
      .asFunction<int Function(int, ffi.Pointer<ENetAddress>)>();

  int enet_socket_send(
    int arg0,
    ffi.Pointer<ENetAddress> arg1,
    ffi.Pointer<ENetBuffer> arg2,
    int arg3,
  ) {
    return _enet_socket_send(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _enet_socket_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ENetSocket, ffi.Pointer<ENetAddress>,
              ffi.Pointer<ENetBuffer>, ffi.Size)>>('enet_socket_send');
  late final _enet_socket_send = _enet_socket_sendPtr.asFunction<
      int Function(
          int, ffi.Pointer<ENetAddress>, ffi.Pointer<ENetBuffer>, int)>();

  int enet_socket_receive(
    int arg0,
    ffi.Pointer<ENetAddress> arg1,
    ffi.Pointer<ENetBuffer> arg2,
    int arg3,
  ) {
    return _enet_socket_receive(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _enet_socket_receivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ENetSocket, ffi.Pointer<ENetAddress>,
              ffi.Pointer<ENetBuffer>, ffi.Size)>>('enet_socket_receive');
  late final _enet_socket_receive = _enet_socket_receivePtr.asFunction<
      int Function(
          int, ffi.Pointer<ENetAddress>, ffi.Pointer<ENetBuffer>, int)>();

  int enet_socket_wait(
    int arg0,
    ffi.Pointer<enet_uint32> arg1,
    int arg2,
  ) {
    return _enet_socket_wait(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _enet_socket_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ENetSocket, ffi.Pointer<enet_uint32>,
              enet_uint32)>>('enet_socket_wait');
  late final _enet_socket_wait = _enet_socket_waitPtr
      .asFunction<int Function(int, ffi.Pointer<enet_uint32>, int)>();

  int enet_socket_set_option(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _enet_socket_set_option(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _enet_socket_set_optionPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ENetSocket, ffi.Int32, ffi.Int)>>(
      'enet_socket_set_option');
  late final _enet_socket_set_option =
      _enet_socket_set_optionPtr.asFunction<int Function(int, int, int)>();

  int enet_socket_get_option(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _enet_socket_get_option(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _enet_socket_get_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ENetSocket, ffi.Int32,
              ffi.Pointer<ffi.Int>)>>('enet_socket_get_option');
  late final _enet_socket_get_option = _enet_socket_get_optionPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Int>)>();

  int enet_socket_shutdown(
    int arg0,
    int arg1,
  ) {
    return _enet_socket_shutdown(
      arg0,
      arg1,
    );
  }

  late final _enet_socket_shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ENetSocket, ffi.Int32)>>(
          'enet_socket_shutdown');
  late final _enet_socket_shutdown =
      _enet_socket_shutdownPtr.asFunction<int Function(int, int)>();

  void enet_socket_destroy(
    int arg0,
  ) {
    return _enet_socket_destroy(
      arg0,
    );
  }

  late final _enet_socket_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ENetSocket)>>(
          'enet_socket_destroy');
  late final _enet_socket_destroy =
      _enet_socket_destroyPtr.asFunction<void Function(int)>();

  int enet_socketset_select(
    int arg0,
    ffi.Pointer<ENetSocketSet> arg1,
    ffi.Pointer<ENetSocketSet> arg2,
    int arg3,
  ) {
    return _enet_socketset_select(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _enet_socketset_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ENetSocket,
              ffi.Pointer<ENetSocketSet>,
              ffi.Pointer<ENetSocketSet>,
              enet_uint32)>>('enet_socketset_select');
  late final _enet_socketset_select = _enet_socketset_selectPtr.asFunction<
      int Function(
          int, ffi.Pointer<ENetSocketSet>, ffi.Pointer<ENetSocketSet>, int)>();

  /// Attempts to parse the printable form of the IP address in the parameter hostName
  /// and sets the host field in the address parameter if successful.
  /// @param address destination to store the parsed IP address
  /// @param hostName IP address to parse
  /// @retval 0 on success
  /// @retval < 0 on failure
  /// @returns the address of the given hostName in address on success
  int enet_address_set_host_ip(
    ffi.Pointer<ENetAddress> address,
    ffi.Pointer<ffi.Char> hostName,
  ) {
    return _enet_address_set_host_ip(
      address,
      hostName,
    );
  }

  late final _enet_address_set_host_ipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ENetAddress>,
              ffi.Pointer<ffi.Char>)>>('enet_address_set_host_ip');
  late final _enet_address_set_host_ip =
      _enet_address_set_host_ipPtr.asFunction<
          int Function(ffi.Pointer<ENetAddress>, ffi.Pointer<ffi.Char>)>();

  /// Attempts to resolve the host named by the parameter hostName and sets
  /// the host field in the address parameter if successful.
  /// @param address destination to store resolved address
  /// @param hostName host name to lookup
  /// @retval 0 on success
  /// @retval < 0 on failure
  /// @returns the address of the given hostName in address on success
  int enet_address_set_host(
    ffi.Pointer<ENetAddress> address,
    ffi.Pointer<ffi.Char> hostName,
  ) {
    return _enet_address_set_host(
      address,
      hostName,
    );
  }

  late final _enet_address_set_hostPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ENetAddress>,
              ffi.Pointer<ffi.Char>)>>('enet_address_set_host');
  late final _enet_address_set_host = _enet_address_set_hostPtr.asFunction<
      int Function(ffi.Pointer<ENetAddress>, ffi.Pointer<ffi.Char>)>();

  /// Gives the printable form of the IP address specified in the address parameter.
  /// @param address    address printed
  /// @param hostName   destination for name, must not be NULL
  /// @param nameLength maximum length of hostName.
  /// @returns the null-terminated name of the host in hostName on success
  /// @retval 0 on success
  /// @retval < 0 on failure
  int enet_address_get_host_ip(
    ffi.Pointer<ENetAddress> address,
    ffi.Pointer<ffi.Char> hostName,
    int nameLength,
  ) {
    return _enet_address_get_host_ip(
      address,
      hostName,
      nameLength,
    );
  }

  late final _enet_address_get_host_ipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ENetAddress>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('enet_address_get_host_ip');
  late final _enet_address_get_host_ip =
      _enet_address_get_host_ipPtr.asFunction<
          int Function(ffi.Pointer<ENetAddress>, ffi.Pointer<ffi.Char>, int)>();

  /// Attempts to do a reverse lookup of the host field in the address parameter.
  /// @param address    address used for reverse lookup
  /// @param hostName   destination for name, must not be NULL
  /// @param nameLength maximum length of hostName.
  /// @returns the null-terminated name of the host in hostName on success
  /// @retval 0 on success
  /// @retval < 0 on failure
  int enet_address_get_host(
    ffi.Pointer<ENetAddress> address,
    ffi.Pointer<ffi.Char> hostName,
    int nameLength,
  ) {
    return _enet_address_get_host(
      address,
      hostName,
      nameLength,
    );
  }

  late final _enet_address_get_hostPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ENetAddress>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('enet_address_get_host');
  late final _enet_address_get_host = _enet_address_get_hostPtr.asFunction<
      int Function(ffi.Pointer<ENetAddress>, ffi.Pointer<ffi.Char>, int)>();

  /// @}
  ffi.Pointer<ENetPacket> enet_packet_create(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
  ) {
    return _enet_packet_create(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _enet_packet_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ENetPacket> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              enet_uint32)>>('enet_packet_create');
  late final _enet_packet_create = _enet_packet_createPtr.asFunction<
      ffi.Pointer<ENetPacket> Function(ffi.Pointer<ffi.Void>, int, int)>();

  void enet_packet_destroy(
    ffi.Pointer<ENetPacket> arg0,
  ) {
    return _enet_packet_destroy(
      arg0,
    );
  }

  late final _enet_packet_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ENetPacket>)>>(
          'enet_packet_destroy');
  late final _enet_packet_destroy = _enet_packet_destroyPtr
      .asFunction<void Function(ffi.Pointer<ENetPacket>)>();

  int enet_packet_resize(
    ffi.Pointer<ENetPacket> arg0,
    int arg1,
  ) {
    return _enet_packet_resize(
      arg0,
      arg1,
    );
  }

  late final _enet_packet_resizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ENetPacket>, ffi.Size)>>(
      'enet_packet_resize');
  late final _enet_packet_resize = _enet_packet_resizePtr
      .asFunction<int Function(ffi.Pointer<ENetPacket>, int)>();

  int enet_crc32(
    ffi.Pointer<ENetBuffer> arg0,
    int arg1,
  ) {
    return _enet_crc32(
      arg0,
      arg1,
    );
  }

  late final _enet_crc32Ptr = _lookup<
      ffi.NativeFunction<
          enet_uint32 Function(
              ffi.Pointer<ENetBuffer>, ffi.Size)>>('enet_crc32');
  late final _enet_crc32 =
      _enet_crc32Ptr.asFunction<int Function(ffi.Pointer<ENetBuffer>, int)>();

  ffi.Pointer<ENetHost> enet_host_create(
    ffi.Pointer<ENetAddress> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _enet_host_create(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _enet_host_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ENetHost> Function(ffi.Pointer<ENetAddress>, ffi.Size,
              ffi.Size, enet_uint32, enet_uint32)>>('enet_host_create');
  late final _enet_host_create = _enet_host_createPtr.asFunction<
      ffi.Pointer<ENetHost> Function(
          ffi.Pointer<ENetAddress>, int, int, int, int)>();

  void enet_host_destroy(
    ffi.Pointer<ENetHost> arg0,
  ) {
    return _enet_host_destroy(
      arg0,
    );
  }

  late final _enet_host_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ENetHost>)>>(
          'enet_host_destroy');
  late final _enet_host_destroy =
      _enet_host_destroyPtr.asFunction<void Function(ffi.Pointer<ENetHost>)>();

  ffi.Pointer<ENetPeer> enet_host_connect(
    ffi.Pointer<ENetHost> arg0,
    ffi.Pointer<ENetAddress> arg1,
    int arg2,
    int arg3,
  ) {
    return _enet_host_connect(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _enet_host_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ENetPeer> Function(
              ffi.Pointer<ENetHost>,
              ffi.Pointer<ENetAddress>,
              ffi.Size,
              enet_uint32)>>('enet_host_connect');
  late final _enet_host_connect = _enet_host_connectPtr.asFunction<
      ffi.Pointer<ENetPeer> Function(
          ffi.Pointer<ENetHost>, ffi.Pointer<ENetAddress>, int, int)>();

  int enet_host_check_events(
    ffi.Pointer<ENetHost> arg0,
    ffi.Pointer<ENetEvent> arg1,
  ) {
    return _enet_host_check_events(
      arg0,
      arg1,
    );
  }

  late final _enet_host_check_eventsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ENetHost>,
              ffi.Pointer<ENetEvent>)>>('enet_host_check_events');
  late final _enet_host_check_events = _enet_host_check_eventsPtr.asFunction<
      int Function(ffi.Pointer<ENetHost>, ffi.Pointer<ENetEvent>)>();

  int enet_host_service(
    ffi.Pointer<ENetHost> arg0,
    ffi.Pointer<ENetEvent> arg1,
    int arg2,
  ) {
    return _enet_host_service(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _enet_host_servicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ENetHost>, ffi.Pointer<ENetEvent>,
              enet_uint32)>>('enet_host_service');
  late final _enet_host_service = _enet_host_servicePtr.asFunction<
      int Function(ffi.Pointer<ENetHost>, ffi.Pointer<ENetEvent>, int)>();

  void enet_host_flush(
    ffi.Pointer<ENetHost> arg0,
  ) {
    return _enet_host_flush(
      arg0,
    );
  }

  late final _enet_host_flushPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ENetHost>)>>(
          'enet_host_flush');
  late final _enet_host_flush =
      _enet_host_flushPtr.asFunction<void Function(ffi.Pointer<ENetHost>)>();

  void enet_host_broadcast(
    ffi.Pointer<ENetHost> arg0,
    int arg1,
    ffi.Pointer<ENetPacket> arg2,
  ) {
    return _enet_host_broadcast(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _enet_host_broadcastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ENetHost>, enet_uint8,
              ffi.Pointer<ENetPacket>)>>('enet_host_broadcast');
  late final _enet_host_broadcast = _enet_host_broadcastPtr.asFunction<
      void Function(ffi.Pointer<ENetHost>, int, ffi.Pointer<ENetPacket>)>();

  void enet_host_compress(
    ffi.Pointer<ENetHost> arg0,
    ffi.Pointer<ENetCompressor> arg1,
  ) {
    return _enet_host_compress(
      arg0,
      arg1,
    );
  }

  late final _enet_host_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ENetHost>,
              ffi.Pointer<ENetCompressor>)>>('enet_host_compress');
  late final _enet_host_compress = _enet_host_compressPtr.asFunction<
      void Function(ffi.Pointer<ENetHost>, ffi.Pointer<ENetCompressor>)>();

  int enet_host_compress_with_range_coder(
    ffi.Pointer<ENetHost> host,
  ) {
    return _enet_host_compress_with_range_coder(
      host,
    );
  }

  late final _enet_host_compress_with_range_coderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ENetHost>)>>(
          'enet_host_compress_with_range_coder');
  late final _enet_host_compress_with_range_coder =
      _enet_host_compress_with_range_coderPtr
          .asFunction<int Function(ffi.Pointer<ENetHost>)>();

  void enet_host_channel_limit(
    ffi.Pointer<ENetHost> arg0,
    int arg1,
  ) {
    return _enet_host_channel_limit(
      arg0,
      arg1,
    );
  }

  late final _enet_host_channel_limitPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ENetHost>, ffi.Size)>>(
      'enet_host_channel_limit');
  late final _enet_host_channel_limit = _enet_host_channel_limitPtr
      .asFunction<void Function(ffi.Pointer<ENetHost>, int)>();

  void enet_host_bandwidth_limit(
    ffi.Pointer<ENetHost> arg0,
    int arg1,
    int arg2,
  ) {
    return _enet_host_bandwidth_limit(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _enet_host_bandwidth_limitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ENetHost>, enet_uint32,
              enet_uint32)>>('enet_host_bandwidth_limit');
  late final _enet_host_bandwidth_limit = _enet_host_bandwidth_limitPtr
      .asFunction<void Function(ffi.Pointer<ENetHost>, int, int)>();

  void enet_host_bandwidth_throttle(
    ffi.Pointer<ENetHost> arg0,
  ) {
    return _enet_host_bandwidth_throttle(
      arg0,
    );
  }

  late final _enet_host_bandwidth_throttlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ENetHost>)>>(
          'enet_host_bandwidth_throttle');
  late final _enet_host_bandwidth_throttle = _enet_host_bandwidth_throttlePtr
      .asFunction<void Function(ffi.Pointer<ENetHost>)>();

  int enet_host_random_seed() {
    return _enet_host_random_seed();
  }

  late final _enet_host_random_seedPtr =
      _lookup<ffi.NativeFunction<enet_uint32 Function()>>(
          'enet_host_random_seed');
  late final _enet_host_random_seed =
      _enet_host_random_seedPtr.asFunction<int Function()>();

  int enet_host_random(
    ffi.Pointer<ENetHost> arg0,
  ) {
    return _enet_host_random(
      arg0,
    );
  }

  late final _enet_host_randomPtr =
      _lookup<ffi.NativeFunction<enet_uint32 Function(ffi.Pointer<ENetHost>)>>(
          'enet_host_random');
  late final _enet_host_random =
      _enet_host_randomPtr.asFunction<int Function(ffi.Pointer<ENetHost>)>();

  int enet_peer_send(
    ffi.Pointer<ENetPeer> arg0,
    int arg1,
    ffi.Pointer<ENetPacket> arg2,
  ) {
    return _enet_peer_send(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _enet_peer_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ENetPeer>, enet_uint8,
              ffi.Pointer<ENetPacket>)>>('enet_peer_send');
  late final _enet_peer_send = _enet_peer_sendPtr.asFunction<
      int Function(ffi.Pointer<ENetPeer>, int, ffi.Pointer<ENetPacket>)>();

  ffi.Pointer<ENetPacket> enet_peer_receive(
    ffi.Pointer<ENetPeer> arg0,
    ffi.Pointer<enet_uint8> channelID,
  ) {
    return _enet_peer_receive(
      arg0,
      channelID,
    );
  }

  late final _enet_peer_receivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ENetPacket> Function(ffi.Pointer<ENetPeer>,
              ffi.Pointer<enet_uint8>)>>('enet_peer_receive');
  late final _enet_peer_receive = _enet_peer_receivePtr.asFunction<
      ffi.Pointer<ENetPacket> Function(
          ffi.Pointer<ENetPeer>, ffi.Pointer<enet_uint8>)>();

  void enet_peer_ping(
    ffi.Pointer<ENetPeer> arg0,
  ) {
    return _enet_peer_ping(
      arg0,
    );
  }

  late final _enet_peer_pingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ENetPeer>)>>(
          'enet_peer_ping');
  late final _enet_peer_ping =
      _enet_peer_pingPtr.asFunction<void Function(ffi.Pointer<ENetPeer>)>();

  void enet_peer_ping_interval(
    ffi.Pointer<ENetPeer> arg0,
    int arg1,
  ) {
    return _enet_peer_ping_interval(
      arg0,
      arg1,
    );
  }

  late final _enet_peer_ping_intervalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ENetPeer>, enet_uint32)>>('enet_peer_ping_interval');
  late final _enet_peer_ping_interval = _enet_peer_ping_intervalPtr
      .asFunction<void Function(ffi.Pointer<ENetPeer>, int)>();

  void enet_peer_timeout(
    ffi.Pointer<ENetPeer> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _enet_peer_timeout(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _enet_peer_timeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ENetPeer>, enet_uint32, enet_uint32,
              enet_uint32)>>('enet_peer_timeout');
  late final _enet_peer_timeout = _enet_peer_timeoutPtr
      .asFunction<void Function(ffi.Pointer<ENetPeer>, int, int, int)>();

  void enet_peer_reset(
    ffi.Pointer<ENetPeer> arg0,
  ) {
    return _enet_peer_reset(
      arg0,
    );
  }

  late final _enet_peer_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ENetPeer>)>>(
          'enet_peer_reset');
  late final _enet_peer_reset =
      _enet_peer_resetPtr.asFunction<void Function(ffi.Pointer<ENetPeer>)>();

  void enet_peer_disconnect(
    ffi.Pointer<ENetPeer> arg0,
    int arg1,
  ) {
    return _enet_peer_disconnect(
      arg0,
      arg1,
    );
  }

  late final _enet_peer_disconnectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ENetPeer>, enet_uint32)>>('enet_peer_disconnect');
  late final _enet_peer_disconnect = _enet_peer_disconnectPtr
      .asFunction<void Function(ffi.Pointer<ENetPeer>, int)>();

  void enet_peer_disconnect_now(
    ffi.Pointer<ENetPeer> arg0,
    int arg1,
  ) {
    return _enet_peer_disconnect_now(
      arg0,
      arg1,
    );
  }

  late final _enet_peer_disconnect_nowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ENetPeer>, enet_uint32)>>('enet_peer_disconnect_now');
  late final _enet_peer_disconnect_now = _enet_peer_disconnect_nowPtr
      .asFunction<void Function(ffi.Pointer<ENetPeer>, int)>();

  void enet_peer_disconnect_later(
    ffi.Pointer<ENetPeer> arg0,
    int arg1,
  ) {
    return _enet_peer_disconnect_later(
      arg0,
      arg1,
    );
  }

  late final _enet_peer_disconnect_laterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ENetPeer>,
              enet_uint32)>>('enet_peer_disconnect_later');
  late final _enet_peer_disconnect_later = _enet_peer_disconnect_laterPtr
      .asFunction<void Function(ffi.Pointer<ENetPeer>, int)>();

  void enet_peer_throttle_configure(
    ffi.Pointer<ENetPeer> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _enet_peer_throttle_configure(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _enet_peer_throttle_configurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ENetPeer>, enet_uint32, enet_uint32,
              enet_uint32)>>('enet_peer_throttle_configure');
  late final _enet_peer_throttle_configure = _enet_peer_throttle_configurePtr
      .asFunction<void Function(ffi.Pointer<ENetPeer>, int, int, int)>();

  int enet_peer_throttle(
    ffi.Pointer<ENetPeer> arg0,
    int arg1,
  ) {
    return _enet_peer_throttle(
      arg0,
      arg1,
    );
  }

  late final _enet_peer_throttlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ENetPeer>, enet_uint32)>>('enet_peer_throttle');
  late final _enet_peer_throttle = _enet_peer_throttlePtr
      .asFunction<int Function(ffi.Pointer<ENetPeer>, int)>();

  void enet_peer_reset_queues(
    ffi.Pointer<ENetPeer> arg0,
  ) {
    return _enet_peer_reset_queues(
      arg0,
    );
  }

  late final _enet_peer_reset_queuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ENetPeer>)>>(
          'enet_peer_reset_queues');
  late final _enet_peer_reset_queues = _enet_peer_reset_queuesPtr
      .asFunction<void Function(ffi.Pointer<ENetPeer>)>();

  int enet_peer_has_outgoing_commands(
    ffi.Pointer<ENetPeer> arg0,
  ) {
    return _enet_peer_has_outgoing_commands(
      arg0,
    );
  }

  late final _enet_peer_has_outgoing_commandsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ENetPeer>)>>(
          'enet_peer_has_outgoing_commands');
  late final _enet_peer_has_outgoing_commands =
      _enet_peer_has_outgoing_commandsPtr
          .asFunction<int Function(ffi.Pointer<ENetPeer>)>();

  void enet_peer_setup_outgoing_command(
    ffi.Pointer<ENetPeer> arg0,
    ffi.Pointer<ENetOutgoingCommand> arg1,
  ) {
    return _enet_peer_setup_outgoing_command(
      arg0,
      arg1,
    );
  }

  late final _enet_peer_setup_outgoing_commandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ENetPeer>, ffi.Pointer<ENetOutgoingCommand>)>>(
      'enet_peer_setup_outgoing_command');
  late final _enet_peer_setup_outgoing_command =
      _enet_peer_setup_outgoing_commandPtr.asFunction<
          void Function(
              ffi.Pointer<ENetPeer>, ffi.Pointer<ENetOutgoingCommand>)>();

  ffi.Pointer<ENetOutgoingCommand> enet_peer_queue_outgoing_command(
    ffi.Pointer<ENetPeer> arg0,
    ffi.Pointer<ENetProtocol> arg1,
    ffi.Pointer<ENetPacket> arg2,
    int arg3,
    int arg4,
  ) {
    return _enet_peer_queue_outgoing_command(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _enet_peer_queue_outgoing_commandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ENetOutgoingCommand> Function(
              ffi.Pointer<ENetPeer>,
              ffi.Pointer<ENetProtocol>,
              ffi.Pointer<ENetPacket>,
              enet_uint32,
              enet_uint16)>>('enet_peer_queue_outgoing_command');
  late final _enet_peer_queue_outgoing_command =
      _enet_peer_queue_outgoing_commandPtr.asFunction<
          ffi.Pointer<ENetOutgoingCommand> Function(ffi.Pointer<ENetPeer>,
              ffi.Pointer<ENetProtocol>, ffi.Pointer<ENetPacket>, int, int)>();

  ffi.Pointer<ENetIncomingCommand> enet_peer_queue_incoming_command(
    ffi.Pointer<ENetPeer> arg0,
    ffi.Pointer<ENetProtocol> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    return _enet_peer_queue_incoming_command(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _enet_peer_queue_incoming_commandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ENetIncomingCommand> Function(
              ffi.Pointer<ENetPeer>,
              ffi.Pointer<ENetProtocol>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              enet_uint32,
              enet_uint32)>>('enet_peer_queue_incoming_command');
  late final _enet_peer_queue_incoming_command =
      _enet_peer_queue_incoming_commandPtr.asFunction<
          ffi.Pointer<ENetIncomingCommand> Function(
              ffi.Pointer<ENetPeer>,
              ffi.Pointer<ENetProtocol>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int)>();

  ffi.Pointer<ENetAcknowledgement> enet_peer_queue_acknowledgement(
    ffi.Pointer<ENetPeer> arg0,
    ffi.Pointer<ENetProtocol> arg1,
    int arg2,
  ) {
    return _enet_peer_queue_acknowledgement(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _enet_peer_queue_acknowledgementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ENetAcknowledgement> Function(
              ffi.Pointer<ENetPeer>,
              ffi.Pointer<ENetProtocol>,
              enet_uint16)>>('enet_peer_queue_acknowledgement');
  late final _enet_peer_queue_acknowledgement =
      _enet_peer_queue_acknowledgementPtr.asFunction<
          ffi.Pointer<ENetAcknowledgement> Function(
              ffi.Pointer<ENetPeer>, ffi.Pointer<ENetProtocol>, int)>();

  void enet_peer_dispatch_incoming_unreliable_commands(
    ffi.Pointer<ENetPeer> arg0,
    ffi.Pointer<ENetChannel> arg1,
    ffi.Pointer<ENetIncomingCommand> arg2,
  ) {
    return _enet_peer_dispatch_incoming_unreliable_commands(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _enet_peer_dispatch_incoming_unreliable_commandsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ENetPeer>, ffi.Pointer<ENetChannel>,
                  ffi.Pointer<ENetIncomingCommand>)>>(
      'enet_peer_dispatch_incoming_unreliable_commands');
  late final _enet_peer_dispatch_incoming_unreliable_commands =
      _enet_peer_dispatch_incoming_unreliable_commandsPtr.asFunction<
          void Function(ffi.Pointer<ENetPeer>, ffi.Pointer<ENetChannel>,
              ffi.Pointer<ENetIncomingCommand>)>();

  void enet_peer_dispatch_incoming_reliable_commands(
    ffi.Pointer<ENetPeer> arg0,
    ffi.Pointer<ENetChannel> arg1,
    ffi.Pointer<ENetIncomingCommand> arg2,
  ) {
    return _enet_peer_dispatch_incoming_reliable_commands(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _enet_peer_dispatch_incoming_reliable_commandsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ENetPeer>, ffi.Pointer<ENetChannel>,
                  ffi.Pointer<ENetIncomingCommand>)>>(
      'enet_peer_dispatch_incoming_reliable_commands');
  late final _enet_peer_dispatch_incoming_reliable_commands =
      _enet_peer_dispatch_incoming_reliable_commandsPtr.asFunction<
          void Function(ffi.Pointer<ENetPeer>, ffi.Pointer<ENetChannel>,
              ffi.Pointer<ENetIncomingCommand>)>();

  void enet_peer_on_connect(
    ffi.Pointer<ENetPeer> arg0,
  ) {
    return _enet_peer_on_connect(
      arg0,
    );
  }

  late final _enet_peer_on_connectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ENetPeer>)>>(
          'enet_peer_on_connect');
  late final _enet_peer_on_connect = _enet_peer_on_connectPtr
      .asFunction<void Function(ffi.Pointer<ENetPeer>)>();

  void enet_peer_on_disconnect(
    ffi.Pointer<ENetPeer> arg0,
  ) {
    return _enet_peer_on_disconnect(
      arg0,
    );
  }

  late final _enet_peer_on_disconnectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ENetPeer>)>>(
          'enet_peer_on_disconnect');
  late final _enet_peer_on_disconnect = _enet_peer_on_disconnectPtr
      .asFunction<void Function(ffi.Pointer<ENetPeer>)>();

  ffi.Pointer<ffi.Void> enet_range_coder_create() {
    return _enet_range_coder_create();
  }

  late final _enet_range_coder_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'enet_range_coder_create');
  late final _enet_range_coder_create = _enet_range_coder_createPtr
      .asFunction<ffi.Pointer<ffi.Void> Function()>();

  void enet_range_coder_destroy(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _enet_range_coder_destroy(
      arg0,
    );
  }

  late final _enet_range_coder_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'enet_range_coder_destroy');
  late final _enet_range_coder_destroy = _enet_range_coder_destroyPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int enet_range_coder_compress(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ENetBuffer> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<enet_uint8> arg4,
    int arg5,
  ) {
    return _enet_range_coder_compress(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _enet_range_coder_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ENetBuffer>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<enet_uint8>,
              ffi.Size)>>('enet_range_coder_compress');
  late final _enet_range_coder_compress =
      _enet_range_coder_compressPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ENetBuffer>, int, int,
              ffi.Pointer<enet_uint8>, int)>();

  int enet_range_coder_decompress(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<enet_uint8> arg1,
    int arg2,
    ffi.Pointer<enet_uint8> arg3,
    int arg4,
  ) {
    return _enet_range_coder_decompress(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _enet_range_coder_decompressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<enet_uint8>,
              ffi.Size,
              ffi.Pointer<enet_uint8>,
              ffi.Size)>>('enet_range_coder_decompress');
  late final _enet_range_coder_decompress =
      _enet_range_coder_decompressPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<enet_uint8>, int,
              ffi.Pointer<enet_uint8>, int)>();

  int enet_protocol_command_size(
    int arg0,
  ) {
    return _enet_protocol_command_size(
      arg0,
    );
  }

  late final _enet_protocol_command_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(enet_uint8)>>(
          'enet_protocol_command_size');
  late final _enet_protocol_command_size =
      _enet_protocol_command_sizePtr.asFunction<int Function(int)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final Enet _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get enet_initialize =>
      _library._enet_initializePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ENetVersion, ffi.Pointer<ENetCallbacks>)>>
      get enet_initialize_with_callbacks =>
          _library._enet_initialize_with_callbacksPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> get enet_deinitialize =>
      _library._enet_deinitializePtr;
  ffi.Pointer<ffi.NativeFunction<ENetVersion Function()>>
      get enet_linked_version => _library._enet_linked_versionPtr;
  ffi.Pointer<ffi.NativeFunction<enet_uint32 Function()>> get enet_time_get =>
      _library._enet_time_getPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(enet_uint32)>>
      get enet_time_set => _library._enet_time_setPtr;
  ffi.Pointer<ffi.NativeFunction<ENetSocket Function(ffi.Int32)>>
      get enet_socket_create => _library._enet_socket_createPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ENetSocket, ffi.Pointer<ENetAddress>)>>
      get enet_socket_bind => _library._enet_socket_bindPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ENetSocket, ffi.Pointer<ENetAddress>)>>
      get enet_socket_get_address => _library._enet_socket_get_addressPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ENetSocket, ffi.Int)>>
      get enet_socket_listen => _library._enet_socket_listenPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ENetSocket Function(ENetSocket, ffi.Pointer<ENetAddress>)>>
      get enet_socket_accept => _library._enet_socket_acceptPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ENetSocket, ffi.Pointer<ENetAddress>)>>
      get enet_socket_connect => _library._enet_socket_connectPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ENetSocket,
              ffi.Pointer<ENetAddress>,
              ffi.Pointer<ENetBuffer>,
              ffi.Size)>> get enet_socket_send => _library._enet_socket_sendPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ENetSocket,
              ffi.Pointer<ENetAddress>,
              ffi.Pointer<ENetBuffer>,
              ffi.Size)>> get enet_socket_receive =>
      _library._enet_socket_receivePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ENetSocket, ffi.Pointer<enet_uint32>, enet_uint32)>>
      get enet_socket_wait => _library._enet_socket_waitPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ENetSocket, ffi.Int32, ffi.Int)>>
      get enet_socket_set_option => _library._enet_socket_set_optionPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ENetSocket, ffi.Int32, ffi.Pointer<ffi.Int>)>>
      get enet_socket_get_option => _library._enet_socket_get_optionPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ENetSocket, ffi.Int32)>>
      get enet_socket_shutdown => _library._enet_socket_shutdownPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ENetSocket)>>
      get enet_socket_destroy => _library._enet_socket_destroyPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ENetSocket,
              ffi.Pointer<ENetSocketSet>,
              ffi.Pointer<ENetSocketSet>,
              enet_uint32)>> get enet_socketset_select =>
      _library._enet_socketset_selectPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ENetAddress>, ffi.Pointer<ffi.Char>)>>
      get enet_address_set_host_ip => _library._enet_address_set_host_ipPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ENetAddress>, ffi.Pointer<ffi.Char>)>>
      get enet_address_set_host => _library._enet_address_set_hostPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ENetAddress>, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get enet_address_get_host_ip => _library._enet_address_get_host_ipPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ENetAddress>, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get enet_address_get_host => _library._enet_address_get_hostPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ENetPacket> Function(
                  ffi.Pointer<ffi.Void>, ffi.Size, enet_uint32)>>
      get enet_packet_create => _library._enet_packet_createPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ENetPacket>)>>
      get enet_packet_destroy => _library._enet_packet_destroyPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ENetPacket>, ffi.Size)>>
      get enet_packet_resize => _library._enet_packet_resizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              enet_uint32 Function(ffi.Pointer<ENetBuffer>, ffi.Size)>>
      get enet_crc32 => _library._enet_crc32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ENetHost> Function(
              ffi.Pointer<ENetAddress>,
              ffi.Size,
              ffi.Size,
              enet_uint32,
              enet_uint32)>> get enet_host_create =>
      _library._enet_host_createPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ENetHost>)>>
      get enet_host_destroy => _library._enet_host_destroyPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ENetPeer> Function(
              ffi.Pointer<ENetHost>,
              ffi.Pointer<ENetAddress>,
              ffi.Size,
              enet_uint32)>> get enet_host_connect =>
      _library._enet_host_connectPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ENetHost>, ffi.Pointer<ENetEvent>)>>
      get enet_host_check_events => _library._enet_host_check_eventsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ENetHost>, ffi.Pointer<ENetEvent>, enet_uint32)>>
      get enet_host_service => _library._enet_host_servicePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ENetHost>)>>
      get enet_host_flush => _library._enet_host_flushPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ENetHost>, enet_uint8, ffi.Pointer<ENetPacket>)>>
      get enet_host_broadcast => _library._enet_host_broadcastPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ENetHost>, ffi.Pointer<ENetCompressor>)>>
      get enet_host_compress => _library._enet_host_compressPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ENetHost>)>>
      get enet_host_compress_with_range_coder =>
          _library._enet_host_compress_with_range_coderPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ENetHost>, ffi.Size)>>
      get enet_host_channel_limit => _library._enet_host_channel_limitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ENetHost>, enet_uint32, enet_uint32)>>
      get enet_host_bandwidth_limit => _library._enet_host_bandwidth_limitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ENetHost>)>>
      get enet_host_bandwidth_throttle =>
          _library._enet_host_bandwidth_throttlePtr;
  ffi.Pointer<ffi.NativeFunction<enet_uint32 Function()>>
      get enet_host_random_seed => _library._enet_host_random_seedPtr;
  ffi.Pointer<ffi.NativeFunction<enet_uint32 Function(ffi.Pointer<ENetHost>)>>
      get enet_host_random => _library._enet_host_randomPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ENetPeer>, enet_uint8, ffi.Pointer<ENetPacket>)>>
      get enet_peer_send => _library._enet_peer_sendPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ENetPacket> Function(
                  ffi.Pointer<ENetPeer>, ffi.Pointer<enet_uint8>)>>
      get enet_peer_receive => _library._enet_peer_receivePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ENetPeer>)>>
      get enet_peer_ping => _library._enet_peer_pingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ENetPeer>, enet_uint32)>>
      get enet_peer_ping_interval => _library._enet_peer_ping_intervalPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ENetPeer>, enet_uint32, enet_uint32,
              enet_uint32)>> get enet_peer_timeout =>
      _library._enet_peer_timeoutPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ENetPeer>)>>
      get enet_peer_reset => _library._enet_peer_resetPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ENetPeer>, enet_uint32)>>
      get enet_peer_disconnect => _library._enet_peer_disconnectPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ENetPeer>, enet_uint32)>>
      get enet_peer_disconnect_now => _library._enet_peer_disconnect_nowPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ENetPeer>, enet_uint32)>>
      get enet_peer_disconnect_later => _library._enet_peer_disconnect_laterPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ENetPeer>, enet_uint32, enet_uint32,
              enet_uint32)>> get enet_peer_throttle_configure =>
      _library._enet_peer_throttle_configurePtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ENetPeer>, enet_uint32)>>
      get enet_peer_throttle => _library._enet_peer_throttlePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ENetPeer>)>>
      get enet_peer_reset_queues => _library._enet_peer_reset_queuesPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ENetPeer>)>>
      get enet_peer_has_outgoing_commands =>
          _library._enet_peer_has_outgoing_commandsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ENetPeer>, ffi.Pointer<ENetOutgoingCommand>)>>
      get enet_peer_setup_outgoing_command =>
          _library._enet_peer_setup_outgoing_commandPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ENetOutgoingCommand> Function(
              ffi.Pointer<ENetPeer>,
              ffi.Pointer<ENetProtocol>,
              ffi.Pointer<ENetPacket>,
              enet_uint32,
              enet_uint16)>> get enet_peer_queue_outgoing_command =>
      _library._enet_peer_queue_outgoing_commandPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ENetIncomingCommand> Function(
              ffi.Pointer<ENetPeer>,
              ffi.Pointer<ENetProtocol>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              enet_uint32,
              enet_uint32)>> get enet_peer_queue_incoming_command =>
      _library._enet_peer_queue_incoming_commandPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ENetAcknowledgement> Function(
              ffi.Pointer<ENetPeer>,
              ffi.Pointer<ENetProtocol>,
              enet_uint16)>> get enet_peer_queue_acknowledgement =>
      _library._enet_peer_queue_acknowledgementPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ENetPeer>, ffi.Pointer<ENetChannel>,
                  ffi.Pointer<ENetIncomingCommand>)>>
      get enet_peer_dispatch_incoming_unreliable_commands =>
          _library._enet_peer_dispatch_incoming_unreliable_commandsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ENetPeer>, ffi.Pointer<ENetChannel>,
                  ffi.Pointer<ENetIncomingCommand>)>>
      get enet_peer_dispatch_incoming_reliable_commands =>
          _library._enet_peer_dispatch_incoming_reliable_commandsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ENetPeer>)>>
      get enet_peer_on_connect => _library._enet_peer_on_connectPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ENetPeer>)>>
      get enet_peer_on_disconnect => _library._enet_peer_on_disconnectPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>
      get enet_range_coder_create => _library._enet_range_coder_createPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get enet_range_coder_destroy => _library._enet_range_coder_destroyPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ENetBuffer>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<enet_uint8>,
              ffi.Size)>> get enet_range_coder_compress =>
      _library._enet_range_coder_compressPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<enet_uint8>,
              ffi.Size,
              ffi.Pointer<enet_uint8>,
              ffi.Size)>> get enet_range_coder_decompress =>
      _library._enet_range_coder_decompressPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Size Function(enet_uint8)>>
      get enet_protocol_command_size => _library._enet_protocol_command_sizePtr;
}

/// An ENet host for communicating with peers.
///
/// No fields should be modified unless otherwise stated.
///
/// @sa enet_host_create()
/// @sa enet_host_destroy()
/// @sa enet_host_connect()
/// @sa enet_host_service()
/// @sa enet_host_flush()
/// @sa enet_host_broadcast()
/// @sa enet_host_compress()
/// @sa enet_host_compress_with_range_coder()
/// @sa enet_host_channel_limit()
/// @sa enet_host_bandwidth_limit()
/// @sa enet_host_bandwidth_throttle()
final class _ENetHost extends ffi.Struct {
  @ENetSocket()
  external int socket;

  /// < Internet address of the host
  external ENetAddress address;

  /// < downstream bandwidth of the host
  @enet_uint32()
  external int incomingBandwidth;

  /// < upstream bandwidth of the host
  @enet_uint32()
  external int outgoingBandwidth;

  @enet_uint32()
  external int bandwidthThrottleEpoch;

  @enet_uint32()
  external int mtu;

  @enet_uint32()
  external int randomSeed;

  @ffi.Int()
  external int recalculateBandwidthLimits;

  /// < array of peers allocated for this host
  external ffi.Pointer<ENetPeer> peers;

  /// < number of peers allocated for this host
  @ffi.Size()
  external int peerCount;

  /// < maximum number of channels allowed for connected peers
  @ffi.Size()
  external int channelLimit;

  @enet_uint32()
  external int serviceTime;

  external ENetList dispatchQueue;

  @enet_uint32()
  external int totalQueued;

  @ffi.Size()
  external int packetSize;

  @enet_uint16()
  external int headerFlags;

  @ffi.Array.multi([32])
  external ffi.Array<ENetProtocol> commands;

  @ffi.Size()
  external int commandCount;

  @ffi.Array.multi([65])
  external ffi.Array<ENetBuffer> buffers;

  @ffi.Size()
  external int bufferCount;

  /// < callback the user can set to enable packet checksums for this host
  external ENetChecksumCallback checksum;

  external ENetCompressor compressor;

  @ffi.Array.multi([2, 4096])
  external ffi.Array<ffi.Array<enet_uint8>> packetData;

  external ENetAddress receivedAddress;

  external ffi.Pointer<enet_uint8> receivedData;

  @ffi.Size()
  external int receivedDataLength;

  /// < total data sent, user should reset to 0 as needed to prevent overflow
  @enet_uint32()
  external int totalSentData;

  /// < total UDP packets sent, user should reset to 0 as needed to prevent overflow
  @enet_uint32()
  external int totalSentPackets;

  /// < total data received, user should reset to 0 as needed to prevent overflow
  @enet_uint32()
  external int totalReceivedData;

  /// < total UDP packets received, user should reset to 0 as needed to prevent overflow
  @enet_uint32()
  external int totalReceivedPackets;

  /// < callback the user can set to intercept received raw UDP packets
  external ENetInterceptCallback intercept;

  @ffi.Size()
  external int connectedPeers;

  @ffi.Size()
  external int bandwidthLimitedPeers;

  /// < optional number of allowed peers from duplicate IPs, defaults to ENET_PROTOCOL_MAXIMUM_PEER_ID
  @ffi.Size()
  external int duplicatePeers;

  /// < the maximum allowable packet size that may be sent or received on a peer
  @ffi.Size()
  external int maximumPacketSize;

  /// < the maximum aggregate amount of buffer space a peer may use waiting for packets to be delivered
  @ffi.Size()
  external int maximumWaitingData;
}

typedef ENetSocket = SOCKET;
typedef SOCKET = UINT_PTR;
typedef UINT_PTR = ffi.UnsignedLongLong;

/// Portable internet address structure.
///
/// The host must be specified in network byte-order, and the port must be in host
/// byte-order. The constant ENET_HOST_ANY may be used to specify the default
/// server host. The constant ENET_HOST_BROADCAST may be used to specify the
/// broadcast address (255.255.255.255).  This makes sense for enet_host_connect,
/// but not for enet_host_create.  Once a server responds to a broadcast, the
/// address is updated from ENET_HOST_BROADCAST to the server's actual IP address.
typedef ENetAddress = _ENetAddress;

/// Portable internet address structure.
///
/// The host must be specified in network byte-order, and the port must be in host
/// byte-order. The constant ENET_HOST_ANY may be used to specify the default
/// server host. The constant ENET_HOST_BROADCAST may be used to specify the
/// broadcast address (255.255.255.255).  This makes sense for enet_host_connect,
/// but not for enet_host_create.  Once a server responds to a broadcast, the
/// address is updated from ENET_HOST_BROADCAST to the server's actual IP address.
final class _ENetAddress extends ffi.Struct {
  @enet_uint32()
  external int host;

  @enet_uint16()
  external int port;
}

typedef enet_uint32 = ffi.UnsignedInt;
typedef enet_uint16 = ffi.UnsignedShort;

/// An ENet peer which data packets may be sent or received from.
///
/// No fields should be modified unless otherwise specified.
typedef ENetPeer = _ENetPeer;

/// An ENet peer which data packets may be sent or received from.
///
/// No fields should be modified unless otherwise specified.
final class _ENetPeer extends ffi.Struct {
  external ENetListNode dispatchList;

  external ffi.Pointer<_ENetHost> host;

  @enet_uint16()
  external int outgoingPeerID;

  @enet_uint16()
  external int incomingPeerID;

  @enet_uint32()
  external int connectID;

  @enet_uint8()
  external int outgoingSessionID;

  @enet_uint8()
  external int incomingSessionID;

  /// < Internet address of the peer
  external ENetAddress address;

  /// < Application private data, may be freely modified
  external ffi.Pointer<ffi.Void> data;

  @ffi.Int32()
  external int state;

  external ffi.Pointer<ENetChannel> channels;

  /// < Number of channels allocated for communication with peer
  @ffi.Size()
  external int channelCount;

  /// < Downstream bandwidth of the client in bytes/second
  @enet_uint32()
  external int incomingBandwidth;

  /// < Upstream bandwidth of the client in bytes/second
  @enet_uint32()
  external int outgoingBandwidth;

  @enet_uint32()
  external int incomingBandwidthThrottleEpoch;

  @enet_uint32()
  external int outgoingBandwidthThrottleEpoch;

  @enet_uint32()
  external int incomingDataTotal;

  @enet_uint32()
  external int outgoingDataTotal;

  @enet_uint32()
  external int lastSendTime;

  @enet_uint32()
  external int lastReceiveTime;

  @enet_uint32()
  external int nextTimeout;

  @enet_uint32()
  external int earliestTimeout;

  @enet_uint32()
  external int packetLossEpoch;

  @enet_uint32()
  external int packetsSent;

  @enet_uint32()
  external int packetsLost;

  /// < mean packet loss of reliable packets as a ratio with respect to the constant ENET_PEER_PACKET_LOSS_SCALE
  @enet_uint32()
  external int packetLoss;

  @enet_uint32()
  external int packetLossVariance;

  @enet_uint32()
  external int packetThrottle;

  @enet_uint32()
  external int packetThrottleLimit;

  @enet_uint32()
  external int packetThrottleCounter;

  @enet_uint32()
  external int packetThrottleEpoch;

  @enet_uint32()
  external int packetThrottleAcceleration;

  @enet_uint32()
  external int packetThrottleDeceleration;

  @enet_uint32()
  external int packetThrottleInterval;

  @enet_uint32()
  external int pingInterval;

  @enet_uint32()
  external int timeoutLimit;

  @enet_uint32()
  external int timeoutMinimum;

  @enet_uint32()
  external int timeoutMaximum;

  @enet_uint32()
  external int lastRoundTripTime;

  @enet_uint32()
  external int lowestRoundTripTime;

  @enet_uint32()
  external int lastRoundTripTimeVariance;

  @enet_uint32()
  external int highestRoundTripTimeVariance;

  /// < mean round trip time (RTT), in milliseconds, between sending a reliable packet and receiving its acknowledgement
  @enet_uint32()
  external int roundTripTime;

  @enet_uint32()
  external int roundTripTimeVariance;

  @enet_uint32()
  external int mtu;

  @enet_uint32()
  external int windowSize;

  @enet_uint32()
  external int reliableDataInTransit;

  @enet_uint16()
  external int outgoingReliableSequenceNumber;

  external ENetList acknowledgements;

  external ENetList sentReliableCommands;

  external ENetList outgoingSendReliableCommands;

  external ENetList outgoingCommands;

  external ENetList dispatchedCommands;

  @enet_uint16()
  external int flags;

  @enet_uint16()
  external int reserved;

  @enet_uint16()
  external int incomingUnsequencedGroup;

  @enet_uint16()
  external int outgoingUnsequencedGroup;

  @ffi.Array.multi([32])
  external ffi.Array<enet_uint32> unsequencedWindow;

  @enet_uint32()
  external int eventData;

  @ffi.Size()
  external int totalWaitingData;
}

typedef ENetListNode = _ENetListNode;

final class _ENetListNode extends ffi.Struct {
  external ffi.Pointer<_ENetListNode> next;

  external ffi.Pointer<_ENetListNode> previous;
}

typedef enet_uint8 = ffi.UnsignedChar;

abstract class ENetPeerState {
  static const int ENET_PEER_STATE_DISCONNECTED = 0;
  static const int ENET_PEER_STATE_CONNECTING = 1;
  static const int ENET_PEER_STATE_ACKNOWLEDGING_CONNECT = 2;
  static const int ENET_PEER_STATE_CONNECTION_PENDING = 3;
  static const int ENET_PEER_STATE_CONNECTION_SUCCEEDED = 4;
  static const int ENET_PEER_STATE_CONNECTED = 5;
  static const int ENET_PEER_STATE_DISCONNECT_LATER = 6;
  static const int ENET_PEER_STATE_DISCONNECTING = 7;
  static const int ENET_PEER_STATE_ACKNOWLEDGING_DISCONNECT = 8;
  static const int ENET_PEER_STATE_ZOMBIE = 9;
}

typedef ENetChannel = _ENetChannel;

final class _ENetChannel extends ffi.Struct {
  @enet_uint16()
  external int outgoingReliableSequenceNumber;

  @enet_uint16()
  external int outgoingUnreliableSequenceNumber;

  @enet_uint16()
  external int usedReliableWindows;

  @ffi.Array.multi([16])
  external ffi.Array<enet_uint16> reliableWindows;

  @enet_uint16()
  external int incomingReliableSequenceNumber;

  @enet_uint16()
  external int incomingUnreliableSequenceNumber;

  external ENetList incomingReliableCommands;

  external ENetList incomingUnreliableCommands;
}

typedef ENetList = _ENetList;

final class _ENetList extends ffi.Struct {
  external ENetListNode sentinel;
}

typedef ENetProtocol = _ENetProtocol;

final class _ENetProtocol extends ffi.Union {
  external ENetProtocolCommandHeader header;

  external ENetProtocolAcknowledge acknowledge;

  external ENetProtocolConnect connect;

  external ENetProtocolVerifyConnect verifyConnect;

  external ENetProtocolDisconnect disconnect;

  external ENetProtocolPing ping;

  external ENetProtocolSendReliable sendReliable;

  external ENetProtocolSendUnreliable sendUnreliable;

  external ENetProtocolSendUnsequenced sendUnsequenced;

  external ENetProtocolSendFragment sendFragment;

  external ENetProtocolBandwidthLimit bandwidthLimit;

  external ENetProtocolThrottleConfigure throttleConfigure;
}

typedef ENetProtocolCommandHeader = _ENetProtocolCommandHeader;

@ffi.Packed(1)
final class _ENetProtocolCommandHeader extends ffi.Struct {
  @enet_uint8()
  external int command;

  @enet_uint8()
  external int channelID;

  @enet_uint16()
  external int reliableSequenceNumber;
}

typedef ENetProtocolAcknowledge = _ENetProtocolAcknowledge;

@ffi.Packed(1)
final class _ENetProtocolAcknowledge extends ffi.Struct {
  external ENetProtocolCommandHeader header;

  @enet_uint16()
  external int receivedReliableSequenceNumber;

  @enet_uint16()
  external int receivedSentTime;
}

typedef ENetProtocolConnect = _ENetProtocolConnect;

@ffi.Packed(1)
final class _ENetProtocolConnect extends ffi.Struct {
  external ENetProtocolCommandHeader header;

  @enet_uint16()
  external int outgoingPeerID;

  @enet_uint8()
  external int incomingSessionID;

  @enet_uint8()
  external int outgoingSessionID;

  @enet_uint32()
  external int mtu;

  @enet_uint32()
  external int windowSize;

  @enet_uint32()
  external int channelCount;

  @enet_uint32()
  external int incomingBandwidth;

  @enet_uint32()
  external int outgoingBandwidth;

  @enet_uint32()
  external int packetThrottleInterval;

  @enet_uint32()
  external int packetThrottleAcceleration;

  @enet_uint32()
  external int packetThrottleDeceleration;

  @enet_uint32()
  external int connectID;

  @enet_uint32()
  external int data;
}

typedef ENetProtocolVerifyConnect = _ENetProtocolVerifyConnect;

@ffi.Packed(1)
final class _ENetProtocolVerifyConnect extends ffi.Struct {
  external ENetProtocolCommandHeader header;

  @enet_uint16()
  external int outgoingPeerID;

  @enet_uint8()
  external int incomingSessionID;

  @enet_uint8()
  external int outgoingSessionID;

  @enet_uint32()
  external int mtu;

  @enet_uint32()
  external int windowSize;

  @enet_uint32()
  external int channelCount;

  @enet_uint32()
  external int incomingBandwidth;

  @enet_uint32()
  external int outgoingBandwidth;

  @enet_uint32()
  external int packetThrottleInterval;

  @enet_uint32()
  external int packetThrottleAcceleration;

  @enet_uint32()
  external int packetThrottleDeceleration;

  @enet_uint32()
  external int connectID;
}

typedef ENetProtocolDisconnect = _ENetProtocolDisconnect;

@ffi.Packed(1)
final class _ENetProtocolDisconnect extends ffi.Struct {
  external ENetProtocolCommandHeader header;

  @enet_uint32()
  external int data;
}

typedef ENetProtocolPing = _ENetProtocolPing;

final class _ENetProtocolPing extends ffi.Struct {
  external ENetProtocolCommandHeader header;
}

typedef ENetProtocolSendReliable = _ENetProtocolSendReliable;

@ffi.Packed(1)
final class _ENetProtocolSendReliable extends ffi.Struct {
  external ENetProtocolCommandHeader header;

  @enet_uint16()
  external int dataLength;
}

typedef ENetProtocolSendUnreliable = _ENetProtocolSendUnreliable;

@ffi.Packed(1)
final class _ENetProtocolSendUnreliable extends ffi.Struct {
  external ENetProtocolCommandHeader header;

  @enet_uint16()
  external int unreliableSequenceNumber;

  @enet_uint16()
  external int dataLength;
}

typedef ENetProtocolSendUnsequenced = _ENetProtocolSendUnsequenced;

@ffi.Packed(1)
final class _ENetProtocolSendUnsequenced extends ffi.Struct {
  external ENetProtocolCommandHeader header;

  @enet_uint16()
  external int unsequencedGroup;

  @enet_uint16()
  external int dataLength;
}

typedef ENetProtocolSendFragment = _ENetProtocolSendFragment;

@ffi.Packed(1)
final class _ENetProtocolSendFragment extends ffi.Struct {
  external ENetProtocolCommandHeader header;

  @enet_uint16()
  external int startSequenceNumber;

  @enet_uint16()
  external int dataLength;

  @enet_uint32()
  external int fragmentCount;

  @enet_uint32()
  external int fragmentNumber;

  @enet_uint32()
  external int totalLength;

  @enet_uint32()
  external int fragmentOffset;
}

typedef ENetProtocolBandwidthLimit = _ENetProtocolBandwidthLimit;

@ffi.Packed(1)
final class _ENetProtocolBandwidthLimit extends ffi.Struct {
  external ENetProtocolCommandHeader header;

  @enet_uint32()
  external int incomingBandwidth;

  @enet_uint32()
  external int outgoingBandwidth;
}

typedef ENetProtocolThrottleConfigure = _ENetProtocolThrottleConfigure;

@ffi.Packed(1)
final class _ENetProtocolThrottleConfigure extends ffi.Struct {
  external ENetProtocolCommandHeader header;

  @enet_uint32()
  external int packetThrottleInterval;

  @enet_uint32()
  external int packetThrottleAcceleration;

  @enet_uint32()
  external int packetThrottleDeceleration;
}

final class ENetBuffer extends ffi.Struct {
  @ffi.Size()
  external int dataLength;

  external ffi.Pointer<ffi.Void> data;
}

/// Callback that computes the checksum of the data held in buffers[0:bufferCount-1]
typedef ENetChecksumCallback = ffi.Pointer<
    ffi.NativeFunction<
        enet_uint32 Function(
            ffi.Pointer<ENetBuffer> buffers, ffi.Size bufferCount)>>;

/// An ENet packet compressor for compressing UDP packets before socket sends or receives.
typedef ENetCompressor = _ENetCompressor;

/// An ENet packet compressor for compressing UDP packets before socket sends or receives.
final class _ENetCompressor extends ffi.Struct {
  /// Context data for the compressor. Must be non-NULL.
  external ffi.Pointer<ffi.Void> context;

  /// Compresses from inBuffers[0:inBufferCount-1], containing inLimit bytes, to outData, outputting at most outLimit bytes. Should return 0 on failure.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Void> context,
              ffi.Pointer<ENetBuffer> inBuffers,
              ffi.Size inBufferCount,
              ffi.Size inLimit,
              ffi.Pointer<enet_uint8> outData,
              ffi.Size outLimit)>> compress;

  /// Decompresses from inData, containing inLimit bytes, to outData, outputting at most outLimit bytes. Should return 0 on failure.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Void> context,
              ffi.Pointer<enet_uint8> inData,
              ffi.Size inLimit,
              ffi.Pointer<enet_uint8> outData,
              ffi.Size outLimit)>> decompress;

  /// Destroys the context when compression is disabled or the host is destroyed. May be NULL.
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> context)>>
      destroy;
}

/// Callback for intercepting received raw UDP packets. Should return 1 to intercept, 0 to ignore, or -1 to propagate an error.
typedef ENetInterceptCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Pointer<_ENetHost> host, ffi.Pointer<_ENetEvent> event)>>;

/// An ENet event as returned by enet_host_service().
///
/// @sa enet_host_service
final class _ENetEvent extends ffi.Struct {
  /// < type of the event
  @ffi.Int32()
  external int type;

  /// < peer that generated a connect, disconnect or receive event
  external ffi.Pointer<ENetPeer> peer;

  /// < channel on the peer that generated the event, if appropriate
  @enet_uint8()
  external int channelID;

  /// < data associated with the event, if appropriate
  @enet_uint32()
  external int data;

  /// < packet associated with the event, if appropriate
  external ffi.Pointer<ENetPacket> packet;
}

/// An ENet event type, as specified in @ref ENetEvent.
abstract class ENetEventType {
  /// no event occurred within the specified time limit
  static const int ENET_EVENT_TYPE_NONE = 0;

  /// a connection request initiated by enet_host_connect has completed.
  /// The peer field contains the peer which successfully connected.
  static const int ENET_EVENT_TYPE_CONNECT = 1;

  /// a peer has disconnected.  This event is generated on a successful
  /// completion of a disconnect initiated by enet_peer_disconnect, if
  /// a peer has timed out, or if a connection request intialized by
  /// enet_host_connect has timed out.  The peer field contains the peer
  /// which disconnected. The data field contains user supplied data
  /// describing the disconnection, or 0, if none is available.
  static const int ENET_EVENT_TYPE_DISCONNECT = 2;

  /// a packet has been received from a peer.  The peer field specifies the
  /// peer which sent the packet.  The channelID field specifies the channel
  /// number upon which the packet was received.  The packet field contains
  /// the packet that was received; this packet must be destroyed with
  /// enet_packet_destroy after use.
  static const int ENET_EVENT_TYPE_RECEIVE = 3;
}

/// ENet packet structure.
///
/// An ENet data packet that may be sent to or received from a peer. The shown
/// fields should only be read and never modified. The data field contains the
/// allocated data for the packet. The dataLength fields specifies the length
/// of the allocated data.  The flags field is either 0 (specifying no flags),
/// or a bitwise-or of any combination of the following flags:
///
/// ENET_PACKET_FLAG_RELIABLE - packet must be received by the target peer
/// and resend attempts should be made until the packet is delivered
///
/// ENET_PACKET_FLAG_UNSEQUENCED - packet will not be sequenced with other packets
/// (not supported for reliable packets)
///
/// ENET_PACKET_FLAG_NO_ALLOCATE - packet will not allocate data, and user must supply it instead
///
/// ENET_PACKET_FLAG_UNRELIABLE_FRAGMENT - packet will be fragmented using unreliable
/// (instead of reliable) sends if it exceeds the MTU
///
/// ENET_PACKET_FLAG_SENT - whether the packet has been sent from all queues it has been entered into
/// @sa ENetPacketFlag
typedef ENetPacket = _ENetPacket;

/// ENet packet structure.
///
/// An ENet data packet that may be sent to or received from a peer. The shown
/// fields should only be read and never modified. The data field contains the
/// allocated data for the packet. The dataLength fields specifies the length
/// of the allocated data.  The flags field is either 0 (specifying no flags),
/// or a bitwise-or of any combination of the following flags:
///
/// ENET_PACKET_FLAG_RELIABLE - packet must be received by the target peer
/// and resend attempts should be made until the packet is delivered
///
/// ENET_PACKET_FLAG_UNSEQUENCED - packet will not be sequenced with other packets
/// (not supported for reliable packets)
///
/// ENET_PACKET_FLAG_NO_ALLOCATE - packet will not allocate data, and user must supply it instead
///
/// ENET_PACKET_FLAG_UNRELIABLE_FRAGMENT - packet will be fragmented using unreliable
/// (instead of reliable) sends if it exceeds the MTU
///
/// ENET_PACKET_FLAG_SENT - whether the packet has been sent from all queues it has been entered into
/// @sa ENetPacketFlag
final class _ENetPacket extends ffi.Struct {
  /// < internal use only
  @ffi.Size()
  external int referenceCount;

  /// < bitwise-or of ENetPacketFlag constants
  @enet_uint32()
  external int flags;

  /// < allocated data for packet
  external ffi.Pointer<enet_uint8> data;

  /// < length of data
  @ffi.Size()
  external int dataLength;

  /// < function to be called when the packet is no longer in use
  external ENetPacketFreeCallback freeCallback;

  /// < application private data, may be freely modified
  external ffi.Pointer<ffi.Void> userData;
}

typedef ENetPacketFreeCallback = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<_ENetPacket>)>>;

abstract class ENetSocketType {
  static const int ENET_SOCKET_TYPE_STREAM = 1;
  static const int ENET_SOCKET_TYPE_DATAGRAM = 2;
}

abstract class ENetSocketWait {
  static const int ENET_SOCKET_WAIT_NONE = 0;
  static const int ENET_SOCKET_WAIT_SEND = 1;
  static const int ENET_SOCKET_WAIT_RECEIVE = 2;
  static const int ENET_SOCKET_WAIT_INTERRUPT = 4;
}

abstract class ENetSocketOption {
  static const int ENET_SOCKOPT_NONBLOCK = 1;
  static const int ENET_SOCKOPT_BROADCAST = 2;
  static const int ENET_SOCKOPT_RCVBUF = 3;
  static const int ENET_SOCKOPT_SNDBUF = 4;
  static const int ENET_SOCKOPT_REUSEADDR = 5;
  static const int ENET_SOCKOPT_RCVTIMEO = 6;
  static const int ENET_SOCKOPT_SNDTIMEO = 7;
  static const int ENET_SOCKOPT_ERROR = 8;
  static const int ENET_SOCKOPT_NODELAY = 9;
  static const int ENET_SOCKOPT_TTL = 10;
}

abstract class ENetSocketShutdown {
  static const int ENET_SOCKET_SHUTDOWN_READ = 0;
  static const int ENET_SOCKET_SHUTDOWN_WRITE = 1;
  static const int ENET_SOCKET_SHUTDOWN_READ_WRITE = 2;
}

/// Packet flag bit constants.
///
/// The host must be specified in network byte-order, and the port must be in
/// host byte-order. The constant ENET_HOST_ANY may be used to specify the
/// default server host.
///
/// @sa ENetPacket
abstract class ENetPacketFlag {
  /// packet must be received by the target peer and resend attempts should be
  /// made until the packet is delivered
  static const int ENET_PACKET_FLAG_RELIABLE = 1;

  /// packet will not be sequenced with other packets
  /// not supported for reliable packets
  static const int ENET_PACKET_FLAG_UNSEQUENCED = 2;

  /// packet will not allocate data, and user must supply it instead
  static const int ENET_PACKET_FLAG_NO_ALLOCATE = 4;

  /// packet will be fragmented using unreliable (instead of reliable) sends
  /// if it exceeds the MTU
  static const int ENET_PACKET_FLAG_UNRELIABLE_FRAGMENT = 8;

  /// whether the packet has been sent from all queues it has been entered into
  static const int ENET_PACKET_FLAG_SENT = 256;
}

final class _ENetAcknowledgement extends ffi.Struct {
  external ENetListNode acknowledgementList;

  @enet_uint32()
  external int sentTime;

  external ENetProtocol command;
}

final class _ENetOutgoingCommand extends ffi.Struct {
  external ENetListNode outgoingCommandList;

  @enet_uint16()
  external int reliableSequenceNumber;

  @enet_uint16()
  external int unreliableSequenceNumber;

  @enet_uint32()
  external int sentTime;

  @enet_uint32()
  external int roundTripTimeout;

  @enet_uint32()
  external int queueTime;

  @enet_uint32()
  external int fragmentOffset;

  @enet_uint16()
  external int fragmentLength;

  @enet_uint16()
  external int sendAttempts;

  external ENetProtocol command;

  external ffi.Pointer<ENetPacket> packet;
}

final class _ENetIncomingCommand extends ffi.Struct {
  external ENetListNode incomingCommandList;

  @enet_uint16()
  external int reliableSequenceNumber;

  @enet_uint16()
  external int unreliableSequenceNumber;

  external ENetProtocol command;

  @enet_uint32()
  external int fragmentCount;

  @enet_uint32()
  external int fragmentsRemaining;

  external ffi.Pointer<enet_uint32> fragments;

  external ffi.Pointer<ENetPacket> packet;
}

abstract class ENetPeerFlag {
  static const int ENET_PEER_FLAG_NEEDS_DISPATCH = 1;
  static const int ENET_PEER_FLAG_CONTINUE_SENDING = 2;
}

typedef ENetVersion = enet_uint32;
typedef ENetCallbacks = _ENetCallbacks;

final class _ENetCallbacks extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size size)>> malloc;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> memory)>> free;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> no_memory;
}

typedef ENetSocketSet = fd_set;

final class fd_set extends ffi.Struct {
  @u_int()
  external int fd_count;

  @ffi.Array.multi([64])
  external ffi.Array<SOCKET> fd_array;
}

typedef u_int = ffi.UnsignedInt;

/// An ENet host for communicating with peers.
///
/// No fields should be modified unless otherwise stated.
///
/// @sa enet_host_create()
/// @sa enet_host_destroy()
/// @sa enet_host_connect()
/// @sa enet_host_service()
/// @sa enet_host_flush()
/// @sa enet_host_broadcast()
/// @sa enet_host_compress()
/// @sa enet_host_compress_with_range_coder()
/// @sa enet_host_channel_limit()
/// @sa enet_host_bandwidth_limit()
/// @sa enet_host_bandwidth_throttle()
typedef ENetHost = _ENetHost;

/// An ENet event as returned by enet_host_service().
///
/// @sa enet_host_service
typedef ENetEvent = _ENetEvent;
typedef ENetOutgoingCommand = _ENetOutgoingCommand;
typedef ENetIncomingCommand = _ENetIncomingCommand;
typedef ENetAcknowledgement = _ENetAcknowledgement;

const int ENET_HOST_RECEIVE_BUFFER_SIZE = 262144;

const int ENET_HOST_SEND_BUFFER_SIZE = 262144;

const int ENET_HOST_BANDWIDTH_THROTTLE_INTERVAL = 1000;

const int ENET_HOST_DEFAULT_MTU = 1392;

const int ENET_HOST_DEFAULT_MAXIMUM_PACKET_SIZE = 33554432;

const int ENET_HOST_DEFAULT_MAXIMUM_WAITING_DATA = 33554432;

const int ENET_PEER_DEFAULT_ROUND_TRIP_TIME = 500;

const int ENET_PEER_DEFAULT_PACKET_THROTTLE = 32;

const int ENET_PEER_PACKET_THROTTLE_SCALE = 32;

const int ENET_PEER_PACKET_THROTTLE_COUNTER = 7;

const int ENET_PEER_PACKET_THROTTLE_ACCELERATION = 2;

const int ENET_PEER_PACKET_THROTTLE_DECELERATION = 2;

const int ENET_PEER_PACKET_THROTTLE_INTERVAL = 5000;

const int ENET_PEER_PACKET_LOSS_SCALE = 65536;

const int ENET_PEER_PACKET_LOSS_INTERVAL = 10000;

const int ENET_PEER_WINDOW_SIZE_SCALE = 65536;

const int ENET_PEER_TIMEOUT_LIMIT = 32;

const int ENET_PEER_TIMEOUT_MINIMUM = 5000;

const int ENET_PEER_TIMEOUT_MAXIMUM = 30000;

const int ENET_PEER_PING_INTERVAL = 500;

const int ENET_PEER_UNSEQUENCED_WINDOWS = 64;

const int ENET_PEER_UNSEQUENCED_WINDOW_SIZE = 1024;

const int ENET_PEER_FREE_UNSEQUENCED_WINDOWS = 32;

const int ENET_PEER_RELIABLE_WINDOWS = 16;

const int ENET_PEER_RELIABLE_WINDOW_SIZE = 4096;

const int ENET_PEER_FREE_RELIABLE_WINDOWS = 8;

const int ENET_VERSION_MAJOR = 1;

const int ENET_VERSION_MINOR = 3;

const int ENET_VERSION_PATCH = 17;

const int ENET_VERSION = 66321;

const int ENET_HOST_ANY = 0;

const int ENET_HOST_BROADCAST = 4294967295;

const int ENET_PORT_ANY = 0;

const int ENET_BUFFER_MAXIMUM = 65;
